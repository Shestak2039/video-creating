#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import time
from video_downloader import (
    download_youtube_video, 
    get_random_video_from_playlist, 
    get_videos_from_channel,
    generate_hashtags
)
from video_processor import (
    generate_subtitles, 
    add_subtitles_to_video, 
    combine_videos, 
    split_video
)

class VideoProcessor:
    def __init__(
        self, 
        main_video_url=None,
        channel_url=None,
        videos_count=1,
        videos_skip=0,
        background_playlist_url=None,
        background_video_url=None,
        output_folder="output_videos",
        final_video="final_full.mp4",
        subtitles_video="main_with_subtitles.mp4",
        final_with_subtitles="final_with_subtitles.mp4"
    ):
        self.main_video_url = main_video_url
        self.channel_url = channel_url
        self.videos_count = videos_count
        self.videos_skip = videos_skip
        self.background_playlist_url = background_playlist_url
        self.background_video_url = background_video_url
        self.output_folder = output_folder
        self.final_video = final_video
        self.subtitles_video = subtitles_video
        self.final_with_subtitles = final_with_subtitles
        
        self.main_video_file = "downloaded_main.mp4"
        self.background_video_file = "downloaded_background.mp4"
        self.subtitles_file = "subtitles.srt"
        self.audio_file = "audio.aac"
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        os.makedirs(self.output_folder, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤
        self.logs_folder = "video_logs"
        os.makedirs(self.logs_folder, exist_ok=True)
        
    def process(self):
        try:
            videos_to_process = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ URL –∫–∞–Ω–∞–ª–∞
            if self.channel_url:
                print(f"üîç –ü–æ–ª—É—á–µ–Ω–∏–µ {self.videos_count} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞ (–ø—Ä–æ–ø—É—Å–∫ {self.videos_skip})...")
                videos_to_process = get_videos_from_channel(
                    self.channel_url, 
                    count=self.videos_count, 
                    skip=self.videos_skip
                )
                print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(videos_to_process)} –≤–∏–¥–µ–æ —Å –∫–∞–Ω–∞–ª–∞")
            elif self.main_video_url:
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω URL –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                videos_to_process = [{'url': self.main_video_url, 'title': '–û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ'}]
            else:
                print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏ URL –∫–∞–Ω–∞–ª–∞, –Ω–∏ URL –≤–∏–¥–µ–æ")
                return False
            
            processed_videos = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
            for index, video_info in enumerate(videos_to_process):
                print(f"\n{'='*50}")
                print(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {index+1}/{len(videos_to_process)}: {video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
                print(f"{'='*50}\n")
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
                video_index = f"{index+1:02d}"
                main_video_file = f"downloaded_main_{video_index}.mp4"
                subtitles_file = f"subtitles_{video_index}.srt"
                subtitles_video = f"main_with_subtitles_{video_index}.mp4"
                final_with_subtitles = f"final_with_subtitles_{video_index}.mp4"
                
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–µ–æ
                video_folder = os.path.join(self.output_folder, f"video_{video_index}")
                os.makedirs(video_folder, exist_ok=True)
                
                # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
                print(f"üîª –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ {video_index}...")
                main_video_file, video_details = download_youtube_video(video_info['url'], main_video_file)
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                video_title = video_details.get('title', video_info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'))
                video_description = video_details.get('description', video_info.get('description', ''))
                video_uploader = video_details.get('uploader', video_info.get('uploader', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä'))
                video_id = video_details.get('id', video_info.get('id', ''))
                
                # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è –ø–∞–ø–∫–∏ —Å –≤–∏–¥–µ–æ (—É–¥–∞–ª—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã)
                safe_title = ''.join(c for c in video_title if c.isalnum() or c in ' _-')
                safe_title = safe_title.strip()
                if len(safe_title) > 50:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                    safe_title = safe_title[:50]
                
                # –°–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤–Ω—É—Ç—Ä–∏ video_XX
                parts_folder = os.path.join(video_folder, f"{safe_title}")
                os.makedirs(parts_folder, exist_ok=True)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–µ—à—Ç–µ–≥–∏
                hashtags = generate_hashtags(video_title, video_description)
                
                print(f"‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {main_video_file}")
                print(f"\n{'*'*50}")
                print(f"üìã –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ò–î–ï–û {video_index}:")
                print(f"{'*'*50}")
                print(f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}")
                print(f"üë§ –ê–≤—Ç–æ—Ä: {video_uploader}")
                print(f"üîñ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏: {' '.join(hashtags)}")
                print(f"{'*'*50}\n")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ –≤ –ª–æ–≥-—Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –≤–∏–¥–µ–æ
                log_file = os.path.join(video_folder, "video_info.txt")
                with open(log_file, 'w', encoding='utf-8') as f:
                    f.write(f"–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ò–î–ï–û {video_index}\n")
                    f.write(f"{'='*50}\n")
                    f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n")
                    f.write(f"–ê–≤—Ç–æ—Ä: {video_uploader}\n")
                    f.write(f"URL: {video_info['url']}\n")
                    f.write(f"ID: {video_id}\n\n")
                    f.write(f"–û–ü–ò–°–ê–ù–ò–ï:\n{video_description}\n\n")
                    f.write(f"–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –•–ï–®–¢–ï–ì–ò:\n{' '.join(hashtags)}\n")
                
                # –í—ã–±–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω URL –ø–ª–µ–π–ª–∏—Å—Ç–∞
                if self.background_playlist_url and not self.background_video_url:
                    background_video_url = get_random_video_from_playlist(self.background_playlist_url)
                    if not background_video_url:
                        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∏–¥–µ–æ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞")
                        continue
                else:
                    background_video_url = self.background_video_url
                
                background_video_file = f"downloaded_background_{video_index}.mp4"
                print("üîª –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ–Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ...")
                background_video_file, _ = download_youtube_video(background_video_url, background_video_file)
                print(f"‚úÖ –§–æ–Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {background_video_file}")
                
                # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                print("üîä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤...")
                subtitles_file = generate_subtitles(main_video_file, subtitles_file)
                print(f"‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: {subtitles_file}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ –ø–∞–ø–∫—É –≤–∏–¥–µ–æ
                subtitles_copy = os.path.join(video_folder, "subtitles.srt")
                with open(subtitles_file, 'r', encoding='utf-8') as src, open(subtitles_copy, 'w', encoding='utf-8') as dst:
                    dst.write(src.read())
                
                # –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –≤–∏–¥–µ–æ
                print("üé¨ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∫ –≤–∏–¥–µ–æ...")
                subtitles_video = add_subtitles_to_video(
                    main_video_file, 
                    subtitles_file, 
                    subtitles_video
                )
                print(f"‚úÖ –í–∏–¥–µ–æ —Å —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ —Å–æ–∑–¥–∞–Ω–æ: {subtitles_video}")
                
                # –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ
                print("üõ†Ô∏è –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ...")
                final_with_subtitles = combine_videos(
                    subtitles_video,
                    background_video_file,
                    final_with_subtitles
                )
                print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: {final_with_subtitles}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é –ø–æ–ª–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫—É –≤–∏–¥–µ–æ
                full_video_copy = os.path.join(video_folder, "full_video.mp4")
                import shutil
                shutil.copy(final_with_subtitles, full_video_copy)
                
                # –®–∞–≥ 5: –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                print("‚úÇÔ∏è –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏...")
                output_parts_folder = split_video(final_with_subtitles, parts_folder)
                print(f"‚úÖ –ù–∞—Ä–µ–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_parts_folder}")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–µ—à—Ç–µ–≥–∞—Ö –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏
                hashtag_file = os.path.join(parts_folder, "hashtags.txt")
                with open(hashtag_file, 'w', encoding='utf-8') as f:
                    f.write(f"–†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –•–ï–®–¢–ï–ì–ò –î–õ–Ø –í–ò–î–ï–û {video_index}\n")
                    f.write(f"{'='*50}\n")
                    f.write(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {video_title}\n\n")
                    f.write(f"–•–µ—à—Ç–µ–≥–∏:\n{' '.join(hashtags)}\n")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–º –≤–∏–¥–µ–æ
                processed_videos.append({
                    'index': video_index,
                    'title': video_title,
                    'folder': video_folder,
                    'parts_folder': parts_folder
                })
                
                # –®–∞–≥ 6: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
                self.cleanup([
                    main_video_file,
                    background_video_file,
                    subtitles_file,
                    f"audio_{video_index}.aac",
                    subtitles_video,
                    final_with_subtitles
                ])
                
                # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∏–¥–µ–æ
                if index < len(videos_to_process) - 1:
                    print("‚è≥ –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ...")
                    time.sleep(2)
            
            # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ
            summary_file = os.path.join(self.output_folder, "processing_summary.txt")
            with open(summary_file, 'w', encoding='utf-8') as f:
                f.write(f"–û–¢–ß–ï–¢ –û –û–ë–†–ê–ë–û–¢–ö–ï –í–ò–î–ï–û\n")
                f.write(f"{'='*50}\n\n")
                f.write(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {len(processed_videos)}\n\n")
                
                for video in processed_videos:
                    f.write(f"–í–∏–¥–µ–æ {video['index']}: {video['title']}\n")
                    f.write(f"–ü–∞–ø–∫–∞: {video['folder']}\n")
                    f.write(f"–ü–∞–ø–∫–∞ —Å –Ω–∞—Ä–µ–∑–∫–∞–º–∏: {video['parts_folder']}\n")
                    f.write(f"{'-'*30}\n")
            
            print(f"\n{'='*50}")
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"‚úÖ –ö–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –≤–Ω—É—Ç—Ä–∏: {self.output_folder}")
            print(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç: {summary_file}")
            print(f"{'='*50}\n")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def cleanup(self, files_to_remove):
        """–£–¥–∞–ª—è–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ"""
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        
        for file in files_to_remove:
            if os.path.exists(file):
                try:
                    os.remove(file)
                    print(f"  ‚úì –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {file}")
                except Exception as e:
                    print(f"  ‚úó –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file}: {e}")
        
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∏–¥–µ–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–∫–∞—Ö.")